[pytest]
# Test discovery and execution
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers
markers =
    unit: Unit tests
    integration: Integration tests
    slow: Tests that take a long time
    concurrency: Tests that involve concurrent execution
    api: API related tests
    database: Database related tests
    web: Web interface tests
    monitoring: Monitoring system tests
    strategy: Strategy related tests
    backtesting: Backtesting related tests
    risk: Risk management tests
    security: Security related tests

# Logging
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Test execution
addopts = 
    --verbose
    --showlocals
    --tb=short
    --strict-markers
    --cov=src
    --cov-report=term-missing
    --cov-report=html
    --durations=10
    --maxfail=10

# Environment variables
env =
    ENVIRONMENT=test
    CONFIG_PATH=tests/config/test_config.yaml
    LOG_LEVEL=DEBUG

# Temporary directories
cache_dir = .pytest_cache
tmp_path_retention_count = 3
tmp_path_retention_policy = failed

# Coverage settings
[coverage:run]
branch = True
source = src
omit =
    */tests/*
    */__init__.py
    */migrations/*
    */config/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    except ImportError:
    raise AssertionError

# Plugin settings
[pytest-watch]
nobeep = True
clear = True

[pytest-timeout]
timeout = 300

[pytest-random]
random_seed = 42